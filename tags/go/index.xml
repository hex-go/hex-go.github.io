<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Go on Hex Blog</title><link>https://hex-go.github.io/tags/go/</link><description>Recent content in Go on Hex Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>hex-py@gmail.com (Hex)</managingEditor><webMaster>hex-py@gmail.com (Hex)</webMaster><copyright>©2024, All Rights Reserved</copyright><lastBuildDate>Thu, 04 Aug 2022 02:02:09 +0000</lastBuildDate><atom:link href="https://hex-go.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>golangci-lint常见报错说明及修复建议</title><link>https://hex-go.github.io/posts/golang/2022-08-04-golangci-lint%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E8%AF%B4%E6%98%8E%E5%8F%8A%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE/</link><pubDate>Thu, 04 Aug 2022 02:02:09 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Thu, 04 Aug 2022 02:02:09 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2022-08-04-golangci-lint%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E8%AF%B4%E6%98%8E%E5%8F%8A%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE/</guid><description>重要 环境说明 问题 1. Implicit memory aliasing in for loop 报错意思是：在循环中重复使用变量的地址 参考链接 因为for语句中变量是被重用的，即变量内存地址不变，但值发生变化</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>内网搭建goproxy私仓</title><link>https://hex-go.github.io/posts/golang/2022-05-07-%E5%86%85%E7%BD%91%E6%90%AD%E5%BB%BAgoproxy%E7%A7%81%E4%BB%93/</link><pubDate>Sat, 07 May 2022 06:57:41 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Sat, 07 May 2022 06:57:41 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2022-05-07-%E5%86%85%E7%BD%91%E6%90%AD%E5%BB%BAgoproxy%E7%A7%81%E4%BB%93/</guid><description>重要 由于生产环境的函数服务需要编译go包，但内网无法访问互联网。所以需要搭建代理私仓，缓存第三方包。主要考虑的技术选型有两种: nexus和g</description><dc:creator>Hex</dc:creator><category>Go</category><category>Proxy</category><category>Nexus</category><category>Golang</category></item><item><title>Go-Struct-tag深入理解[三]为struct设置参数校验validator</title><link>https://hex-go.github.io/posts/golang/2020-11-12-go-struct-tag%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B8%89%E4%B8%BAstruct%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8Cvalidator/</link><pubDate>Thu, 12 Nov 2020 03:38:14 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Thu, 12 Nov 2020 03:38:14 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-11-12-go-struct-tag%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B8%89%E4%B8%BAstruct%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8Cvalidator/</guid><description>重要 环境说明 安装 使用 Reference</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Struct-tag深入理解[二]为struct设置default值</title><link>https://hex-go.github.io/posts/golang/2020-10-22-go-struct-tag%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BA%8C%E4%B8%BAstruct%E8%AE%BE%E7%BD%AEdefault%E5%80%BC/</link><pubDate>Thu, 22 Oct 2020 07:19:13 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Thu, 22 Oct 2020 07:19:13 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-10-22-go-struct-tag%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BA%8C%E4%B8%BAstruct%E8%AE%BE%E7%BD%AEdefault%E5%80%BC/</guid><description>重要 环境说明 安装 使用 Reference golang 为struct设置默认值的四种方式 how-to-set-default-values-in-go-structs(stack overflow) 为struct设置默认值的包 validator包不支持也不打算支持defaul</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Struct-tag深入理解[一]StructTag规则说明</title><link>https://hex-go.github.io/posts/golang/2020-10-21-go-struct-tag%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B8%80structtag%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E/</link><pubDate>Wed, 21 Oct 2020 09:07:42 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Wed, 21 Oct 2020 09:07:42 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-10-21-go-struct-tag%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B8%80structtag%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E/</guid><description>前言 Go 语言中Struct声明包含三部分: field_name, field_type, field_tag. field_tag的作用: 可以作为字段后额外的注释或者说明 在反射场景下, reflect包中提供</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Vault-benchmark方案</title><link>https://hex-go.github.io/posts/golang/2020-09-23-go-vault-benchmark%E6%96%B9%E6%A1%88/</link><pubDate>Wed, 23 Sep 2020 03:19:25 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Wed, 23 Sep 2020 03:19:25 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-23-go-vault-benchmark%E6%96%B9%E6%A1%88/</guid><description>重要 环境说明 安装 使用 Reference 官方博客-VaultPerformanceBenchmark GitHub-vault-benchmarking GoogleGroups - vaultTool</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Gin-项目结构最佳实践</title><link>https://hex-go.github.io/posts/golang/2020-09-22-go-gin-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 22 Sep 2020 08:36:21 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Tue, 22 Sep 2020 08:36:21 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-22-go-gin-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>重要 环境说明 安装 使用 Reference Gin项目结构最佳实践 在Golang尝试清洁架构 The Clean Architecture 教程：使用 go 的 gin 和 gorm 框架来构建 RESTful API 微服务 使用Gin构建Go Web</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Path-文件路径操作汇总</title><link>https://hex-go.github.io/posts/golang/2020-09-22-go-path-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</link><pubDate>Tue, 22 Sep 2020 08:31:58 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Tue, 22 Sep 2020 08:31:58 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-22-go-path-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</guid><description>重要 1. 目录操作 1.1 删除目录 删除目录下所有内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Golang program to illustrate how to // remove all the files and directories // from the default directory package main import ( &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; ) func main() { //</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-HDFS-操作hdfs文件系统</title><link>https://hex-go.github.io/posts/golang/2020-09-22-go-hdfs-%E6%93%8D%E4%BD%9Chdfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link><pubDate>Tue, 22 Sep 2020 08:29:09 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Tue, 22 Sep 2020 08:29:09 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-22-go-hdfs-%E6%93%8D%E4%BD%9Chdfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid><description>重要 环境说明 安装 使用 Reference hdfs golang client 非webhdfs</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Slice-切片操作汇总</title><link>https://hex-go.github.io/posts/golang/2020-09-22-go-slice-%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</link><pubDate>Tue, 22 Sep 2020 07:23:34 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Tue, 22 Sep 2020 07:23:34 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-22-go-slice-%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</guid><description>重要 删除切片中元素 Fast版本,改变顺序 此代码复制单个元素，元素长度增加, 运行时间不变。仍是复制单个元素的时间。 1 2 3 4 5 6 7 8 9 a := []string{&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;,</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Keycloak-BearerOnlyToken校验</title><link>https://hex-go.github.io/posts/golang/2020-09-22-go-keycloak-beareronlytoken%E6%A0%A1%E9%AA%8C/</link><pubDate>Tue, 22 Sep 2020 04:05:11 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Tue, 22 Sep 2020 04:05:11 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-22-go-keycloak-beareronlytoken%E6%A0%A1%E9%AA%8C/</guid><description>重要 keycloak AccessToken验证过程 1、解码 token（注意是解码，不是解密，因为token是不加密的，只是按照一定规则进行编码，并签名）。</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Tekton使用-使用示例以及遇坑小记</title><link>https://hex-go.github.io/posts/golang/2020-09-16-go-tekton%E4%BD%BF%E7%94%A8-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E9%81%87%E5%9D%91%E5%B0%8F%E8%AE%B0/</link><pubDate>Wed, 16 Sep 2020 09:17:15 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Wed, 16 Sep 2020 09:17:15 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-16-go-tekton%E4%BD%BF%E7%94%A8-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E9%81%87%E5%9D%91%E5%B0%8F%E8%AE%B0/</guid><description>重要 打算依托Tekton,作为工作流工具，将以下业务场景用task实现： 镜像部署 源码构建+镜像部署 源码文件上传hdfs 微服务依赖关系 环境说明</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-fmt格式化IO</title><link>https://hex-go.github.io/posts/golang/2020-09-04-go-fmt%E6%A0%BC%E5%BC%8F%E5%8C%96io/</link><pubDate>Fri, 04 Sep 2020 13:11:57 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Fri, 04 Sep 2020 13:11:57 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-04-go-fmt%E6%A0%BC%E5%BC%8F%E5%8C%96io/</guid><description>重要 环境说明 安装 使用 Reference</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Defer说明</title><link>https://hex-go.github.io/posts/golang/2020-09-03-go-defer%E8%AF%B4%E6%98%8E/</link><pubDate>Thu, 03 Sep 2020 11:04:46 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Thu, 03 Sep 2020 11:04:46 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-03-go-defer%E8%AF%B4%E6%98%8E/</guid><description>重要 defer语句是Go中一个非常有用的特性，可以将一个方法延迟到包裹defer的方法返回时执行，在实际应用中，defer可以充当其他语言中</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-并发实践</title><link>https://hex-go.github.io/posts/golang/2020-09-03-go-%E5%B9%B6%E5%8F%91%E5%AE%9E%E8%B7%B5/</link><pubDate>Thu, 03 Sep 2020 08:58:06 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Thu, 03 Sep 2020 08:58:06 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-03-go-%E5%B9%B6%E5%8F%91%E5%AE%9E%E8%B7%B5/</guid><description>重要 环境说明 安装 使用 Reference 内存内实现任务队列 国外(原创) 国内(第一抄) 国内(第二) 基于redis实现消息队列 harbor-trivy-scanner 原理 go语言并发</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Strings-字符串操作汇总</title><link>https://hex-go.github.io/posts/golang/2020-09-02-go-strings-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</link><pubDate>Wed, 02 Sep 2020 07:16:56 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Wed, 02 Sep 2020 07:16:56 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-09-02-go-strings-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</guid><description>字符串常见操作有： 字符串长度； 求子串； 是否存在某个字符或子串； 子串出现的次数（字符串匹配）； 字符串分割（切分）为[]string； 字符串是否</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Template使用-使用示例以及遇坑小记</title><link>https://hex-go.github.io/posts/golang/2020-08-14-go-template%E4%BD%BF%E7%94%A8-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E9%81%87%E5%9D%91%E5%B0%8F%E8%AE%B0/</link><pubDate>Fri, 14 Aug 2020 08:08:03 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Fri, 14 Aug 2020 08:08:03 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-08-14-go-template%E4%BD%BF%E7%94%A8-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E9%81%87%E5%9D%91%E5%B0%8F%E8%AE%B0/</guid><description>重要 环境说明 安装 使用 Reference go template href内容(&amp;amp;,=等)被转义 Go 语言标准库 text/template 包深入浅出</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-处理JSON-如何创建和解析复杂Json数据</title><link>https://hex-go.github.io/posts/golang/2020-08-14-go-%E5%A4%84%E7%90%86json-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%92%8C%E8%A7%A3%E6%9E%90%E5%A4%8D%E6%9D%82json%E6%95%B0%E6%8D%AE/</link><pubDate>Fri, 14 Aug 2020 07:46:11 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Fri, 14 Aug 2020 07:46:11 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-08-14-go-%E5%A4%84%E7%90%86json-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%92%8C%E8%A7%A3%E6%9E%90%E5%A4%8D%E6%9D%82json%E6%95%B0%E6%8D%AE/</guid><description>重要 环境说明 安装 使用 Reference ^^ Go by Example: JSON ^^ How to use JSON with Go (best practices) ^^ Json 解析复杂结构(interface{}) ^^ go json 实践中遇到的坑 Json 不指定struct从int</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-源码解读--grafana-v7.1.0</title><link>https://hex-go.github.io/posts/golang/2020-07-24-go-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB--grafana-v7.1.0/</link><pubDate>Fri, 24 Jul 2020 10:08:57 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Fri, 24 Jul 2020 10:08:57 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-07-24-go-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB--grafana-v7.1.0/</guid><description>重要 最近研究grafana与keycloak集成，能正常解决认证问题，但用户只会在grafana通过keycloak用户登录时，才会在gra</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>Go-Module实现go语言的插件机制</title><link>https://hex-go.github.io/posts/golang/2020-07-23-go-module%E5%AE%9E%E7%8E%B0go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6/</link><pubDate>Thu, 23 Jul 2020 07:43:17 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Thu, 23 Jul 2020 07:43:17 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-07-23-go-module%E5%AE%9E%E7%8E%B0go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6/</guid><description>重要 最近由于工作需求，需要统一调用各个系统的相同逻辑。并不想每集成一个服务就修改调用的代码，而是想实现插件机制。 利用go包的init特性，将</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>ubuntu18.04初始开发环境搭建</title><link>https://hex-go.github.io/posts/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7/2020-05-10-ubuntu18.04_%E5%88%9D%E5%A7%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Wed, 10 Jun 2020 06:03:00 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Wed, 10 Jun 2020 06:03:00 +0000</atom:modified><guid>https://hex-go.github.io/posts/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7/2020-05-10-ubuntu18.04_%E5%88%9D%E5%A7%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>重要 最重要的事: 本文包括 初始包安装； 安装翻墙软件； 安装docker； 安装Goland开发环境gvm+golang-1.13； 安装前端环境np</description><dc:creator>Hex</dc:creator><category>个人工具</category><category>Ubuntu</category><category>Docker</category><category>Go</category><category>GVM</category><category>Goland</category><category>Nodejs</category><category>Postman</category><category>Typora</category><category>Finalshell</category><category>个人工具</category></item><item><title>Go-常用函数备忘</title><link>https://hex-go.github.io/posts/golang/2020-05-29-go-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%87%E5%BF%98/</link><pubDate>Fri, 29 May 2020 10:20:40 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Fri, 29 May 2020 10:20:40 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2020-05-29-go-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%87%E5%BF%98/</guid><description>重要 记录常用的一些函数 1. 字符串转int64 1 2 3 4 5 6 7 // Use the max value for signed 64 integer. http://golang.org/pkg/builtin/#int64 var s string = &amp;#34;9223372036854775807&amp;#34; i, err := strconv.ParseInt(s, 10, 64) if err != nil { panic(err) } fmt.Printf(&amp;#34;Hello, %v with type %s!\n&amp;#34;, i, reflect.TypeOf(i)) 输出： Hello, 9223372036854775807 with type</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item><item><title>k8S-使用client-go操作集群</title><link>https://hex-go.github.io/posts/kubernetes/2020-05-28-k8s-%E4%BD%BF%E7%94%A8client-go%E6%93%8D%E4%BD%9C%E9%9B%86%E7%BE%A4/</link><pubDate>Thu, 28 May 2020 11:16:44 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Thu, 28 May 2020 11:16:44 +0000</atom:modified><guid>https://hex-go.github.io/posts/kubernetes/2020-05-28-k8s-%E4%BD%BF%E7%94%A8client-go%E6%93%8D%E4%BD%9C%E9%9B%86%E7%BE%A4/</guid><description>重要 环境说明 安装 使用 0. 校验kubeconfig可用性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import ( &amp;#34;k8s.io/client-go/tools/clientcmd&amp;#34; clientcmdapi &amp;#34;k8s.io/client-go/tools/clientcmd/api&amp;#34; ) ## 解析kubeConfig文件， 校验 func (k *K8S)</description><dc:creator>Hex</dc:creator><category>Kubernetes</category><category>Client-go</category><category>Go</category><category>Kubernetes</category></item><item><title>解析k8s-yaml成client-go中的data-structs</title><link>https://hex-go.github.io/posts/kubernetes/2020-05-25-%E8%A7%A3%E6%9E%90k8s-yaml%E6%88%90client-go%E4%B8%AD%E7%9A%84data-structs/</link><pubDate>Mon, 25 May 2020 03:35:11 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Mon, 25 May 2020 03:35:11 +0000</atom:modified><guid>https://hex-go.github.io/posts/kubernetes/2020-05-25-%E8%A7%A3%E6%9E%90k8s-yaml%E6%88%90client-go%E4%B8%AD%E7%9A%84data-structs/</guid><description>重要 开发过程中，需要解析helm-manifest获取到的各种资源的yaml。每个都写映射 环境说明 helm 3 kubernetes-v1.15.6 安装 无 使用 注意: k8s版本不同。，资</description><dc:creator>Hex</dc:creator><category>Kubernetes</category><category>Go</category><category>Kubernetes</category></item><item><title>Golang学习资料</title><link>https://hex-go.github.io/posts/golang/2019-12-29-golang%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</link><pubDate>Sun, 29 Dec 2019 06:43:01 +0000</pubDate><author>hex-py@gmail.com (Hex)</author><atom:modified>Sun, 29 Dec 2019 06:43:01 +0000</atom:modified><guid>https://hex-go.github.io/posts/golang/2019-12-29-golang%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</guid><description>{% note success %} 不错的备查资料 {% endnote %} 超详细备查(利于排查概念模糊点) Go语言入门教程，Golang入门教程（非常详细） 超级实用 Go语言标准库》The</description><dc:creator>Hex</dc:creator><category>Go</category><category>Golang</category></item></channel></rss>